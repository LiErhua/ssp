// This file is automatically generated using github.com/mjibson/esc.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/html5vast.css": {
		local:   "static/html5vast.css",
		size:    295,
		modtime: 1497184022,
		compressed: `
H4sIAAAAAAAA/1zOMW7DMAwF0FkFeorOKpygWZipR2Es2iaqigJFJ2mL3L2QFGcIBw3vf1B07n05nC+K
OZP+vb4457IUNpYEShGNz3R0rga3+tT2iLnmT208FYmr0bHxhYMtsBuGfO2wEM+Lwf4BJxy/ZpU1BT9K
FIW3oU1P7zS16TRJMl/4l2C335Y0m/Cb4w98KmPsbHQ1j5HnBCMlI71/KRpIvWLgtcBhW2KS4eNxV8YQ
OM2+6la5/QcAAP//SgrTmScBAAA=
`,
	},

	"/html5vast.js": {
		local:   "static/html5vast.js",
		size:    15292,
		modtime: 1497202929,
		compressed: `
H4sIAAAAAAAA/9Rba2/buNL+7AD5D1wD70pqEsvpNu+HuiqQJt22QNLNabPdAkFhMBJtM5ElL0m5CQr/
9wPeJEqiLt51gNMCTRxxZjjzzIXUkPaf7e+BZ+D99eXFyZfTz9fgCFzF8BGIz7+NxuA0oiBNJAH4giOU
CoYFY6uXvr9gy/hkDSkbhelSDHyGEUzAR0gxEX+vEaE4TcDx6DfwfHx8cjR+cXR8IobOCIIMrxE4S5fL
NKHglDGCbzOG0+ToY5rwx4iEGMbgxWgMPiQMkQTyURiDCxyihCJTmVDJC6W4UUrmfizJqH/7eJSE/ovR
2N/fe+bv74H9vcEsS0IuDuRmuGtu4XQVw0dEpjg6BPzpNCPxIUhXnJZ6P/b3BoM1JMCkBQGI0jBbooSN
5oi9jRH/+ObxQ1QV6U04P//v++doBrOYadFacK7OVA2AAIhZB84SRRhO2eMKOeAlcIRsf7l64Rya47eY
EcjQdIkTTvZ8PLYPwwc+fFyMw2gaQjGn8xI4p9EaEYapsMUZ8H+cbCMsmKXE5creo0eAkzI6g5oFN/fo
8RsIgPmnELMp0BDxgMBfBK5WiIBzvNaAfJePphFem0ALhyOFtetEeO1IdA36URhDSj/CJQIBcBYnazXm
1AhxVKaYOgcV1wkW89loBQlK2Mc0QiOcUETYGzRLCXINuYcmQ109/imJzhY4LkeKN9Fw6/8ciPT2bsph
BQFYnKw/IRj9jmPk5kFaw11O6PswRoS5mn0k42CGYyQJFifrK4I+pXFcywDNc1gPyyKU9/cGG/Fzf2/g
+1eQUCRLyNfLi1Ki2ZQux47vcwrOCLh+2vKHZfyesdUn9PcEqL/P01AogGfA/Y6TKP0++np5oagyRJkK
xoI1SNB3UKZxvSIMUUyRYAGgwnMa8sLy9Y/bOxQyd3iJQ5LSdMbEhNfXV0NDSsE6SlcocYfv3l4PD3Nr
ZzCmCnWDkqIkcvOn52kYGIME0VWaUPT18mJij4YfG6OqvEMM4OWKICoqL4NzzWA8DRSCRrWibx6v4Zyn
ijv8kFMq0/DMNbh/CUCSxbEC2PfzwCpouLEgMKa8GX8bhTzOebpQ/leSRugLjDMkZhhYhJQETNRklVgu
T+lVqwpHQ680Gge9UnShoPmGRTZy9iJ76EQ/YwSG9ziZT9GaCymVSByMJ/iVnnQUo2TOFhN8cKDwM1Wa
xjhBkK8n+skN/tag3oUgVQ7iHqoKKbsp1+cuGE/uXlWItVp3uVrS4IEGUVgtcpKq5xa9p4JKEBkmqMGb
uyZLLjkXrwpUW2OzxxD+S2AaZqxGwXhyXzXN4NNW3htWdhlSfKybZJDd3HdaVxjXYV7xsWroYGBEX6s+
xcdi0o3+pD9sbJ4+i3F4zxYkzeYL8OenixZ3i9Ui5PRb+VtsJMU07Q43xG/ncYOxv8sNpmloYlCH2SBt
9rsw8FrKGHqd9W9btaa65vw7/ZSQjthsUqIen3lhLukqV4O+Ui0Ru41SOTJ9teuHpH2ObbNLAw7eipWi
Jbn0DHJJ2Sa/9BxyitYUK0+yXZaVee2J1sOyNvjLlM2xbAvjbnNbAmVQWdE7dbMERM+IOD0H5xkRb7bl
YRt0kaIEAegfD1q8qEItwaCFV+HIs8aYvYm3s8jVdnCas3AdNxwScs7fGKtUI7qKMXOdl06ZnjLyGYXc
T+4B570Zf/PAM/D/Y/njQD8+1o/zJ8+/FZJslirJE6sP5V+bfNepR8qbP2PRru//uCcMArXh090Q5Dri
fd8LAvWiNCq6ALmL8Mxtl6Fe+h3vdVmK0SvwwK+/gp5SXjVIgQ+eJWwKmUFFfEewbAyQjU19XkNRXkPx
zK1krCebJmVHVGjszqgQ1WEQz7lHhpRBwoaFyXhWxHUuRhBVd+MmPhXKgwAMwfDAokZXbm3yd9jWCYJ/
InpglqYm0bIKoigQ77kTM0e2RHaGCWX/ySBhYufcjrAgnv6tqHtBXWF5QswrM/0j8JthL0vfHf5LHK1S
nHQGt6brBXpO/IRw53PsGGgtd3cQswUmUd8QF8TbhXiF5Qkxr8y0Y+TL0neHf5guVzFindBrul6g58RP
CHc+x46B1nJ3WEWybng5Tb/qkT0trEL+rqtGtks4s6QPoJKqF6SK9AlBVTPsGFYpdXfArmBGO3EVRL1g
lZRPiKqcYMegCqG7w5Qgmi07QZVUvVBVpE8Iq5phx7hKqTvcGmdxTEOCUNK5L84p++2JC/Kn3A8Xs+x6
L5xLbga7/C5JEMtIkncZOOEmP8ckiKRxDConmE0npaA4Kt35XQH52iva5oAPyxdfLX1F0HpKSSiPhd8h
dpYRghL2mYR2kVWVxC8QAG2mK8R74AeQwMmfvn+2gMkcAZpmJESApUBhIcdLR+NSHUsHYGIhjlOojz+L
yf5IQJgmDCUM8HHFVtWcD6GorrsOwMXJ+jSKzCONxiPuvAukeORNiDq56nwUlyW8iVRat+1M0whapmtU
pPGQ20TSmA69CfD9T2IYnKmHlf5f6a5BDB9deRBZUOzrPuLvmCDjrNSlXtEYshyVVhp8+9Z2r4XP3uOV
eF3hBxTbJru5b0xqbwKqab1pRlG0sy8wZShBxHWk65eIwQgy6Bxa4sIrl1kjtFTkgrdJU2ShpDWwLNGu
83BiIynFuNW1RfTJqGgLWgu1PVztM1JzZSlC8rASnadRlIcmuIXhPcBJb/cI/CpeEc9ylSy+KYmFUdTh
clst8GwVpi5KqWfxuU4yixiroXysKoj/UnJK640s5Fc4mRcHQX9++kD3jXsdJUEML1G2iiBDwBqLQkl5
uWMuFz0QgAR9Bx+WcI50VImTBLkoCIkguIRsMZrFKc9400JFdY2X6paKhAHPXNcUEARjz/sBfP8zg4QV
aOXbmY7+IAjkymw2sHs3TtXxwLWytoFPHRQMgXEmVG4GaxmWLnAfUIXamoCXgEALvMHfatsV/burccpI
vtfZ5IhuGpzgGm6sHV34LzxPOul3TCgDutPU7iZ7P7Gfv7rasJ2OKwv4aTzY0IM1Xfkv3Phcu/ESR+Aq
xXLj19GO3c5xzU3cTpdp1p/GWbU+bn83dfoJHIAeKSmceb3AJMpzssWj9u5nP792NY07vVsW8NP4uKFj
3NPTr4O6546Old/yDWNrq3g7NzU3mDsdpFl/GtfUesw1p/TYchW7ourGqxhRem+MVzOxFatcq27fJTbv
7Xow99ZSthx030HsuuVuvtJ6aHkrBepddMrQA9tN46Hl6n2FvfXavPmNB3XHXxkBouKOv1a/7x1/g752
x19/h6FGiKPAGG+44V9iSBJE3l9fXgQmvK23+A128QIgDT+N7jLKAGWPxZ12g3IaoxkDASjvxdPZjCL2
F47Ywn/uHbkW+OmbxzNtvTssbJP3DcsCDpzVQx0TodKIzx9UFSp1w3SnwhqY7a+geTSiGC07wqjRN9Lt
XIL5tQtZHSTyfMwr6SwyyXiLtqRTr8bQ/146FalkXlQ180k8759OOXk9m8SQUyXTuSSfNKRSQS7DbJVS
zNEPHHhL0zhjqCZXEoYZoSmH2BF7Nf2FnRqdiNuxfYylq6ah7zwlgqZkMxKlyrhAeL5ggS1P34shcARO
xkaq+b6JWV5Ohq8gWBA0CxxHFoXAETq9PB6P/28iZ5GfndevfPh62F5z8il0dLzBSQT+SMRAJSTS27uu
HGzwaSlU0tu7USonMBsTakuhvpAjvgHTeCPYbDD4vorklPBI1s0RvT/ruLdb7mc2tDGtrLaOZo+9UHkn
1D5FS//TshndV1+xU4tmrf42l7MeXcOtKnFrFGxXiN8hpvtPsobqMwRKwooV7ccXPwalc5u+BbjhXqxU
Qq6VpcO2ISXhsL6WrPADisEsJWCGCY+7oslND/PvAAHEqkbl7XEhQcR+7grMI6sUZceHx6oxLsZ0d1mz
KrX+GwAA///j32nPvDsAAA==
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
